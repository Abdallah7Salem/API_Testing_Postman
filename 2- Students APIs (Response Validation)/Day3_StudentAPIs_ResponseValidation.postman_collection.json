{
	"info": {
		"_postman_id": "8d8b276f-9bb5-4910-b12a-36649802fd18",
		"name": "Day3_StudentAPIs_ResponseValidation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40215593"
	},
	"item": [
		{
			"name": "GetASingleStudent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => { \r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => { \r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => { \r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]); \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => { \r",
							"    pm.response.to.have.header(\"Content-Type\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is Length\", () => { \r",
							"    pm.response.to.have.header(\"Content-Length\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => { \r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"application/json\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10ms\", () => { \r",
							"    pm.expect(pm.response.responseTime).to.be.below(10); \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Test data type of the response\", () => { \r",
							"    pm.expect(jsonData).to.be.an(\"object\"); \r",
							"    pm.expect(jsonData.name).to.be.a(\"string\"); \r",
							"    pm.expect(jsonData.id).to.be.a(\"string\"); \r",
							"    pm.expect(jsonData.courses).to.be.an(\"array\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Test array properties\", () => { \r",
							"    pm.expect(jsonData.courses).to.include(\"Java\"); \r",
							"    pm.expect(jsonData.courses).to.have.members([\"Java\", \"Selenium\"]); \r",
							"});\r",
							"\r",
							"pm.test(\"Validate specific fields in JSON response\", () => { \r",
							"    var jsonData = pm.response.json(); \r",
							"    pm.expect(jsonData.id).to.eql(\"1\"); \r",
							"    pm.expect(jsonData.name).to.eql(\"John\"); \r",
							"    pm.expect(jsonData.location).to.eql(\"india\"); \r",
							"    pm.expect(jsonData.phone).to.eql(\"1234567890\"); \r",
							"    pm.expect(jsonData.courses[0]).to.eql(\"Java\"); \r",
							"    pm.expect(jsonData.courses[1]).to.eql(\"Selenium\"); \r",
							"});\r",
							"\r",
							"\r",
							"/* Schema Validation */\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var Ajv = require('ajv')\r",
							"var ajv = new Ajv({logger: console})\r",
							"\r",
							"pm.test('Schema is valid', function() { \r",
							"    pm.expect(ajv.validate(jsonData, schema)).to.be.true; \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAllStudents",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => { \r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => { \r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => { \r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]); \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => { \r",
							"    pm.response.to.have.header(\"Content-Type\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is Length\", () => { \r",
							"    pm.response.to.have.header(\"Content-Length\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => { \r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"application/json\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10ms\", () => { \r",
							"    pm.expect(pm.response.responseTime).to.be.below(10); \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"/* Data type validation for id #1 */\r",
							"pm.test(\"Test data type of the response for id #1\", () => { \r",
							"    pm.expect(jsonData[0]).to.be.an(\"object\"); \r",
							"    pm.expect(jsonData[0].name).to.be.a(\"string\"); \r",
							"    pm.expect(jsonData[0].id).to.be.a(\"string\"); \r",
							"    pm.expect(jsonData[0].courses).to.be.an(\"array\"); \r",
							"});\r",
							"\r",
							"/* Data type validation for id #2 */\r",
							"pm.test(\"Test data type of the response for id #2\", () => { \r",
							"    pm.expect(jsonData[1]).to.be.an(\"object\"); \r",
							"    pm.expect(jsonData[1].name).to.be.a(\"string\"); \r",
							"    pm.expect(jsonData[1].id).to.be.a(\"string\"); \r",
							"    pm.expect(jsonData[1].courses).to.be.an(\"array\"); \r",
							"});\r",
							"\r",
							"/* Data type validation for id #3 */\r",
							"pm.test(\"Test data type of the response for id #3\", () => { \r",
							"    pm.expect(jsonData[2]).to.be.an(\"object\"); \r",
							"    pm.expect(jsonData[2].name).to.be.a(\"string\"); \r",
							"    pm.expect(jsonData[2].id).to.be.a(\"string\"); \r",
							"    pm.expect(jsonData[2].courses).to.be.an(\"array\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Test array properties for id #1\", () => { \r",
							"    pm.expect(jsonData[0].courses).to.include(\"Java\"); \r",
							"    pm.expect(jsonData[0].courses).to.have.members([\"Java\", \"Selenium\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Test array properties for id #2\", () => { \r",
							"    pm.expect(jsonData[1].courses).to.include(\"Python\"); \r",
							"    pm.expect(jsonData[1].courses).to.have.members([\"Python\", \"Appium\"]); \r",
							"});\r",
							"\r",
							"pm.test(\"Test array properties for id #3\", () => { \r",
							"    pm.expect(jsonData[2].courses).to.include(\"C#\"); \r",
							"    pm.expect(jsonData[2].courses).to.have.members([\"C#\", \"RestAPI\"]); \r",
							"});\r",
							"\r",
							"pm.test(\"Validate specific fields in JSON response for id #1\", () => { \r",
							"    var jsonData = pm.response.json(); \r",
							"    pm.expect(jsonData[0].id).to.eql(\"1\"); \r",
							"    pm.expect(jsonData[0].name).to.eql(\"John\"); \r",
							"    pm.expect(jsonData[0].location).to.eql(\"india\"); \r",
							"    pm.expect(jsonData[0].phone).to.eql(\"1234567890\"); \r",
							"    pm.expect(jsonData[0].courses[0]).to.eql(\"Java\"); \r",
							"    pm.expect(jsonData[0].courses[1]).to.eql(\"Selenium\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Validate specific fields in JSON response for id #2\", () => { \r",
							"    var jsonData = pm.response.json(); \r",
							"    pm.expect(jsonData[1].id).to.eql(\"2\"); \r",
							"    pm.expect(jsonData[1].name).to.eql(\"Kim\"); \r",
							"    pm.expect(jsonData[1].location).to.eql(\"US\"); \r",
							"    pm.expect(jsonData[1].phone).to.eql(\"98876543213\"); \r",
							"    pm.expect(jsonData[1].courses[0]).to.eql(\"Python\"); \r",
							"    pm.expect(jsonData[1].courses[1]).to.eql(\"Appium\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Validate specific fields in JSON response for id #3\", () => { \r",
							"    var jsonData = pm.response.json(); \r",
							"    pm.expect(jsonData[2].id).to.eql(\"3\"); \r",
							"    pm.expect(jsonData[2].name).to.eql(\"Smith\"); \r",
							"    pm.expect(jsonData[2].location).to.eql(\"Canada\"); \r",
							"    pm.expect(jsonData[2].phone).to.eql(\"165498765\"); \r",
							"    pm.expect(jsonData[2].courses[0]).to.eql(\"C#\"); \r",
							"    pm.expect(jsonData[2].courses[1]).to.eql(\"RestAPI\"); \r",
							"});\r",
							"\r",
							"/* Schema Validation */\r",
							"var schema = \r",
							"{\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"location\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"phone\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"courses\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"name\",\r",
							"        \"location\",\r",
							"        \"phone\",\r",
							"        \"courses\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"location\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"phone\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"courses\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"name\",\r",
							"        \"location\",\r",
							"        \"phone\",\r",
							"        \"courses\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"location\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"phone\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"courses\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"name\",\r",
							"        \"location\",\r",
							"        \"phone\",\r",
							"        \"courses\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"pm.test('Schema is valid', function() { \r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true; \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateANewStudent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => { \r",
							"    pm.response.to.have.status(201); \r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => { \r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => { \r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]); \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => { \r",
							"    pm.response.to.have.header(\"Content-Type\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is Length\", () => { \r",
							"    pm.response.to.have.header(\"Content-Length\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => { \r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"application/json\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10ms\", () => { \r",
							"    pm.expect(pm.response.responseTime).to.be.below(10); \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Test data type of the response\", () => { \r",
							"    pm.expect(jsonData).to.be.an(\"object\"); \r",
							"    pm.expect(jsonData.name).to.be.a(\"string\"); \r",
							"    pm.expect(jsonData.id).to.be.a(\"string\"); \r",
							"    pm.expect(jsonData.courses).to.be.an(\"array\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Test array properties\", () => { \r",
							"    pm.expect(jsonData.courses).to.include(\"C\"); \r",
							"    pm.expect(jsonData.courses).to.have.members([\"C\", \"C++\"]); \r",
							"});\r",
							"\r",
							"pm.test(\"Validate specific fields in JSON response\", () => { \r",
							"    var jsonData = pm.response.json(); \r",
							"    pm.expect(jsonData.name).to.eql(\"Scott\"); \r",
							"    pm.expect(jsonData.location).to.eql(\"France\"); \r",
							"    pm.expect(jsonData.phone).to.eql(\"123456\"); \r",
							"    pm.expect(jsonData.courses[0]).to.eql(\"C\"); \r",
							"    pm.expect(jsonData.courses[1]).to.eql(\"C++\"); \r",
							"});\r",
							"\r",
							"\r",
							"/* Schema Validation */\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var Ajv = require('ajv')\r",
							"var ajv = new Ajv({logger: console})\r",
							"\r",
							"pm.test('Schema is valid', function() { \r",
							"    pm.expect(ajv.validate(jsonData, schema)).to.be.true; \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Scott\",\r\n    \"location\": \"France\",\r\n    \"phone\": \"123456\",\r\n    \"courses\": [\r\n        \"C\",\r\n        \"C++\"\r\n    ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateAStudentInfo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => { \r",
							"    pm.response.to.have.status(200); \r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", () => { \r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => { \r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]); \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => { \r",
							"    pm.response.to.have.header(\"Content-Type\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is Length\", () => { \r",
							"    pm.response.to.have.header(\"Content-Length\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => { \r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql(\"application/json\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10ms\", () => { \r",
							"    pm.expect(pm.response.responseTime).to.be.below(10); \r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Test data type of the response\", () => { \r",
							"    pm.expect(jsonData).to.be.an(\"object\"); \r",
							"    pm.expect(jsonData.name).to.be.a(\"string\"); \r",
							"    pm.expect(jsonData.id).to.be.a(\"string\"); \r",
							"    pm.expect(jsonData.courses).to.be.an(\"array\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Test array properties\", () => { \r",
							"    pm.expect(jsonData.courses).to.include(\"C#\"); \r",
							"    pm.expect(jsonData.courses).to.have.members([\"C#\", \"C++\"]); \r",
							"});\r",
							"\r",
							"pm.test(\"Validate specific fields in JSON response\", () => { \r",
							"    var jsonData = pm.response.json(); \r",
							"    pm.expect(jsonData.id).to.eql(\"7f43\"); \r",
							"    pm.expect(jsonData.name).to.eql(\"Scott\"); \r",
							"    pm.expect(jsonData.location).to.eql(\"Germany\"); \r",
							"    pm.expect(jsonData.phone).to.eql(\"654321\"); \r",
							"    pm.expect(jsonData.courses[0]).to.eql(\"C#\"); \r",
							"    pm.expect(jsonData.courses[1]).to.eql(\"C++\"); \r",
							"});\r",
							"\r",
							"\r",
							"/* Schema Validation */\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"location\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"phone\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"courses\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"location\",\r",
							"    \"phone\",\r",
							"    \"courses\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"var Ajv = require('ajv')\r",
							"var ajv = new Ajv({logger: console})\r",
							"\r",
							"pm.test('Schema is valid', function() { \r",
							"    pm.expect(ajv.validate(jsonData, schema)).to.be.true; \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Scott\",\r\n    \"location\": \"Germany\",\r\n    \"phone\": \"654321\",\r\n    \"courses\": [\r\n        \"C#\",\r\n        \"C++\"\r\n    ]\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students/7f43",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"7f43"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteAStudent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/7f43",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"7f43"
					]
				}
			},
			"response": []
		}
	]
}